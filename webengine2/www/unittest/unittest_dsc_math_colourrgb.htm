<!DOCTYPE html>
<html>
	<head>
		<title>unittest dsc math colour RGB</title>
		<meta http-equiv="Content-Style-Type" content="text/css"/>
	</head>
	<body>
		<script type='text/JavaScript' SRC="../javascript/dsc_core.js" ></script>

		<!-- unittest setup -->
		<script type='text/javascript'>
			<!-- 
var s_arrayUnitTest = [];
var s_pass = true;

s_arrayUnitTest.push({
	m_name : "Client Should Be Able To Create Colour",
	Run : function()
	{
		var colourA = DSC.Math.ColourRGB.Factory();
		var result = (undefined != colourA);
		result &= (DSC.Math.ColourRGB.GetRed(colourA) == 0.0);
		result &= (DSC.Math.ColourRGB.GetGreen(colourA) == 0.0);
		result &= (DSC.Math.ColourRGB.GetBlue(colourA) == 0.0);
		var colourB = DSC.Math.ColourRGB.Factory(1.0, 0.5, 0.25);
		result &= (undefined != colourB);
		result &= (DSC.Math.ColourRGB.GetRed(colourB) == 1.0);
		result &= (DSC.Math.ColourRGB.GetGreen(colourB) == 0.5);
		result &= (DSC.Math.ColourRGB.GetBlue(colourB) == 0.25);
		return result;
	}
});


s_arrayUnitTest.push({
	m_name : "Client Should Be Able To Express ColourRGB as string",
	Run : function()
	{
		var vectorA = DSC.Math.ColourRGB.Factory(8.0, 0.5, 0.2);
		var vectorB = DSC.Math.ColourRGB.Factory(8.0, 0.6, 0.2);
		var stringA = DSC.Math.ColourRGB.AsString(vectorA);
		var stringB = DSC.Math.ColourRGB.AsString(vectorB);
		var stringC = DSC.Math.ColourRGB.AsString(vectorA);
		var result = ("string" == (typeof stringA));
		result &= ("string" == (typeof stringB));
		result &= (stringA != stringB);
		result &= (stringA == stringC);
		return result;
	}
});

s_arrayUnitTest.push({
	m_name : "Client Should Be Able To Express ColourRGB as fillstring",
	Run : function()
	{
		var vectorA = DSC.Math.ColourRGB.Factory(8.0, 0.5, 0.2);
		var vectorB = DSC.Math.ColourRGB.Factory(8.0, 0.6, 0.2);
		var stringA = DSC.Math.ColourRGB.AsFillString(vectorA);
		var stringB = DSC.Math.ColourRGB.AsFillString(vectorB);
		var stringC = DSC.Math.ColourRGB.AsFillString(vectorA);
		var result = ("string" == (typeof stringA));
		result &= ("string" == (typeof stringB));
		result &= (stringA != stringB);
		result &= (stringA == stringC);
		return result;
	}
});
s_arrayUnitTest.push({
	m_name : "Client Should Be Able To Set and Get values in ColourRGB",
	Run : function()
	{
		var vector = DSC.Math.ColourRGB.Factory();
		var result = (undefined != vector);
		result &= (DSC.Math.ColourRGB.GetRed(vector) == 0.0);
		result &= (DSC.Math.ColourRGB.GetGreen(vector) == 0.0);
		result &= (DSC.Math.ColourRGB.GetBlue(vector) == 0.0);
		DSC.Math.ColourRGB.Set(vector, 2.0, 3.0, 4.0);
		result &= (DSC.Math.ColourRGB.GetRed(vector) == 2.0);
		result &= (DSC.Math.ColourRGB.GetGreen(vector) == 3.0);
		result &= (DSC.Math.ColourRGB.GetBlue(vector) == 4.0);
		DSC.Math.ColourRGB.SetRed(vector, 5.0);
		DSC.Math.ColourRGB.SetGreen(vector, 6.0);
		DSC.Math.ColourRGB.SetBlue(vector, 7.0);
		result &= (DSC.Math.ColourRGB.GetRed(vector) == 5.0);
		result &= (DSC.Math.ColourRGB.GetGreen(vector) == 6.0);
		result &= (DSC.Math.ColourRGB.GetBlue(vector) == 7.0);
		return result;
	}
});

s_arrayUnitTest.push({
	m_name : "Client Should Be Able To Clone a ColourRGB",
	Run : function()
	{
		var vectorA = DSC.Math.ColourRGB.Factory(7.0, 8.0, 9.0);
		var vectorB = DSC.Math.ColourRGB.Clone(vectorA);
		var vectorC = DSC.Math.ColourRGB.Factory();
		var vectorD = DSC.Math.ColourRGB.Clone(vectorA, vectorC);

		var result = (undefined != vectorB);
		result &= (undefined != vectorD);
		result &= (DSC.Math.ColourRGB.GetRed(vectorB) == 7.0);
		result &= (DSC.Math.ColourRGB.GetGreen(vectorB) == 8.0);
		result &= (DSC.Math.ColourRGB.GetBlue(vectorB) == 9.0);
		result &= (DSC.Math.ColourRGB.GetRed(vectorC) == 7.0);
		result &= (DSC.Math.ColourRGB.GetGreen(vectorC) == 8.0);
		result &= (DSC.Math.ColourRGB.GetBlue(vectorC) == 9.0);
		result &= (DSC.Math.ColourRGB.GetRed(vectorD) == 7.0);
		result &= (DSC.Math.ColourRGB.GetGreen(vectorD) == 8.0);
		result &= (DSC.Math.ColourRGB.GetBlue(vectorD) == 9.0);
		return result;
	}
});

s_arrayUnitTest.push({
	m_name : "Client Should Be Able To test ColourRGB is almost zero",
	Run : function()
	{
		var result = true;
		var vectorA = DSC.Math.ColourRGB.Factory();
		var vectorB = DSC.Math.ColourRGB.Factory(0.001, -0.001, 0.001);
		var vectorC = DSC.Math.ColourRGB.Factory(3.0, 4.0, 5.0);

		result &= (true == DSC.Math.ColourRGB.AlmostZero(vectorA));
		result &= (true == DSC.Math.ColourRGB.AlmostZero(vectorB, 0.01));
		result &= (false == DSC.Math.ColourRGB.AlmostZero(vectorC));
		return result;
	}
});

s_arrayUnitTest.push({
	m_name : "Client Should Be Able To test ColourRGB is almost equal",
	Run : function()
	{
		var result = true;
		var result = true;
		var vectorA = DSC.Math.ColourRGB.Factory();
		var vectorB = DSC.Math.ColourRGB.Factory(0.001, -0.001, 0.001);
		var vectorC = DSC.Math.ColourRGB.Factory(3.0, 4.0, 5.0);
		var vectorD = DSC.Math.ColourRGB.Factory(3.0, 0.0, 0.0);
		var vectorE = DSC.Math.ColourRGB.Factory(0.0, 4.0, 0.0);
		var vectorF = DSC.Math.ColourRGB.Factory(3.0, 0.0, 5.0);
		var vectorG = DSC.Math.ColourRGB.Factory(3.0, 0.0, 0.0);

		result &= (true == DSC.Math.ColourRGB.AlmostEqual(vectorA, vectorA));
		result &= (true == DSC.Math.ColourRGB.AlmostEqual(vectorA, vectorB, 0.01));
		result &= (false == DSC.Math.ColourRGB.AlmostEqual(vectorB, vectorC));
		result &= (false == DSC.Math.ColourRGB.AlmostEqual(vectorA, vectorD));
		result &= (false == DSC.Math.ColourRGB.AlmostEqual(vectorA, vectorE));
		result &= (false == DSC.Math.ColourRGB.AlmostEqual(vectorA, vectorF));
		result &= (false == DSC.Math.ColourRGB.AlmostEqual(vectorA, vectorG));
		return result;
	}
});

			// -->
		</script>
		<!-- unittest run -->
		<script type='text/javascript'>
			<!-- 
var s_date = new Date();
document.write("<p> unitTest " + s_date.toTimeString() + "<\/p>");
document.write("<p> s_arrayUnitTest.length " + s_arrayUnitTest.length + "<\/p>");
s_arrayUnitTest.forEach(function(in_item)
{ 
	if (in_item.Run)
	{ 
		var result = in_item.Run();
		var resultString = ((true == result) ? "Pass:" : "Fail:") + in_item.m_name
		document.write('<span>' + resultString + '<\/span></br>');
		s_pass &= result;
	} 
});
s_pass &= (0 < s_arrayUnitTest.length);
var resultString = "Done " + ((true == s_pass) ? "all Passed" : "something Failed");
document.write("<p>" + resultString + "<\/p>");

window.parent.postMessage(['result', s_pass, 'DSC.Math.ColourRGB'], '*');

			// -->
		</script>
	</body>
</html>
