<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<meta http-equiv="Content-Style-Type" content="text/css"/>
		<title>render capsule 3d</title>
	</head>
	<!-- <body style='background-color: #000000'> -->
	<body>
		<div id="containerId" style="display:flex;flex-direction:row;flex-wrap:wrap;align-items:flex-start;align-content:flex-start;justify-content: flex-start;">
			<div>
				<canvas id='canvasId' style = 'background-color: #000000; width: 512px; height: 256px;' >
					This text is displayed if your browser does not support HTML5 Canvas.
				</canvas>
				<br/>
				<button type="button" onclick="gMain.Stop()">Stop</button>
			</div>
		</div>

		<script type='text/JavaScript' SRC="../../js/fubar_core_render.js" ></script>

		<!--hook events-->
		<script type='text/javascript'>
			<!-- 

Main = function(in_renderer, in_sceneCameraTransform, in_sceneCamera, in_dagMatrixVP, in_container){
	this.m_renderer = in_renderer;
	this.m_sceneCameraTransform = in_sceneCameraTransform;
	this.m_sceneCamera = in_sceneCamera;
	this.m_dagMatrixV = in_sceneCameraTransform.GetMatrixInvert();
	this.m_dagMatrixP = in_sceneCamera.GetMatrix();
	this.m_dagMatrixVP = in_dagMatrixVP;
	this.m_container = in_container;
	this.m_keepGoing = true;

	this.m_arrayRender = [];
	this.m_arrayRender.push({Render : function(in_render){
		in_render.Clear(c.ColourRGBA.s_grey, 1.0);
		}});

	c.SceneGrid.Factory(this.m_arrayRender, this.m_dagMatrixVP, this.m_renderer);

	this.MakeModelTransform();
	this.MakeModel();

	return;
};

Main.Factory = function(){	

	var renderer = undefined;
	var canvas = document.getElementById('canvasId');	
	paramObject = {
		depth : true
	};
	var renderer = c.Render.Factory(canvas, paramObject);

	var container = document.getElementById('containerId');	

	var sceneCameraTransform = c.SceneTransformOrbit.Factory(0, 0, 0, 0, 0, 50.0);
	var div = document.createElement("div");
	c.UISlider.Factory(document, div, "PosX", -100, 100, sceneCameraTransform.GetDagPosX());
	c.UISlider.Factory(document, div, "PosY", -100, 100, sceneCameraTransform.GetDagPosY());
	c.UISlider.Factory(document, div, "PosZ", -100, 100, sceneCameraTransform.GetDagPosZ());
	c.UISlider.Factory(document, div, "Latitude", -90, 90, sceneCameraTransform.GetLatitude());
	c.UISlider.Factory(document, div, "Longitude", -180, 180, sceneCameraTransform.GetLongitude());
	c.UISlider.Factory(document, div, "Distance", 0, 200, sceneCameraTransform.GetDistance());
	container.appendChild(div);

	var sceneCamera = c.SceneCameraFov.Factory(renderer.GetViewport(), 0.1, 100, 90);
	var div = document.createElement("div");
	c.UISlider.Factory(document, div, "Near", 0.1, 1000.0, sceneCamera.GetDagNear());
	c.UISlider.Factory(document, div, "Far", 0.1, 1000.0, sceneCamera.GetDagFar());
	c.UISlider.Factory(document, div, "Fov", 5, 150, sceneCamera.GetDagFov());
	container.appendChild(div);

	var instructionContext = {
		"matrix_mul" : function(lhs, rhs, _prevValue) { 
			return c.Matrix4.Multiply(lhs, rhs, _prevValue);
		},
	};
	var instructionArray = [
		{
			"op" : c.DagNodeInstructionEnum.push_node, //V
			"node" : sceneCameraTransform.GetMatrixInvert()
		},
		{
			"op" : c.DagNodeInstructionEnum.push_node,  //P
			"node" : sceneCamera.GetMatrix()
		},
		{
			"op" : c.DagNodeInstructionEnum.fn2,
			"data" : "matrix_mul"
		}
	];
	var dagMatrixVP = c.DagNodeCalculate.Factory("MatrixMV", instructionArray, instructionContext);
	c.DagNodeCollection.SetNodesLinked(sceneCameraTransform.GetMatrixInvert(), dagMatrixVP);
	c.DagNodeCollection.SetNodesLinked(sceneCamera.GetMatrix(), dagMatrixVP);

	return new Main(renderer, sceneCameraTransform, sceneCamera, dagMatrixVP, container);
}

Main.prototype.MakeModelTransform = function(){	
	var objectTransform = c.SceneTransform.Factory(0, 0, 0, 0, 0, 0);
	var div = document.createElement("div");
	c.UISlider.Factory(document, div, "PosX", -20, 20, objectTransform.GetDagPosX());
	c.UISlider.Factory(document, div, "PosY", -20, 20, objectTransform.GetDagPosY());
	c.UISlider.Factory(document, div, "PosZ", -20, 20, objectTransform.GetDagPosZ());
	c.UISlider.Factory(document, div, "Heading", -180, 180, objectTransform.GetHeading());
	c.UISlider.Factory(document, div, "Altitude", -90, 90, objectTransform.GetAltitude());
	c.UISlider.Factory(document, div, "Bank", -180, 180, objectTransform.GetBank());
	this.m_container.appendChild(div);
	this.m_dagMatrixM = objectTransform.GetMatrix();

	var instructionContext = {
		"matrix_mul" : function(lhs, rhs, _prevValue) { 
			return c.Matrix4.Multiply(lhs, rhs, _prevValue);
		},
	};

	var instructionArray = [
		{
			"op" : c.DagNodeInstructionEnum.push_node,
			"node" : objectTransform.GetMatrix()
		},
		{
			"op" : c.DagNodeInstructionEnum.push_node,
			"node" : this.m_sceneCameraTransform.GetMatrixInvert()
		},
		{
			"op" : c.DagNodeInstructionEnum.fn2,
			"data" : "matrix_mul"
		}
	];
	var dagMatrixMV = c.DagNodeCalculate.Factory("MatrixMV", instructionArray, instructionContext);
	c.DagNodeCollection.SetNodesLinked(objectTransform.GetMatrix(), dagMatrixMV);
	c.DagNodeCollection.SetNodesLinked(this.m_sceneCameraTransform.GetMatrixInvert(), dagMatrixMV);
	this.m_dagMatrixMV = dagMatrixMV;

	var instructionArray = [
		{
			"op" : c.DagNodeInstructionEnum.push_node,
			"node" : dagMatrixMV
		},
		{
			"op" : c.DagNodeInstructionEnum.push_node,
			"node" : this.m_sceneCamera.GetMatrix()
		},
		{
			"op" : c.DagNodeInstructionEnum.fn2,
			"data" : "matrix_mul"
		}
	];
	var dagNodeMVP = c.DagNodeCalculate.Factory("MVP", instructionArray, instructionContext);
	c.DagNodeCollection.SetNodesLinked(this.m_sceneCamera.GetMatrix(), dagNodeMVP);
	c.DagNodeCollection.SetNodesLinked(dagMatrixMV, dagNodeMVP);
	this.m_dagMatrixMVP = dagNodeMVP;

	return;
}


Main.prototype.MakeModel = function(){	

/*
vec4 a_capsule0 pos.xyz, radius
vec4 a_capsule1 lengthNormal.xyz, halfLength

vec3 v_circleA  xy, radius
vec3 v_segment  norm xy, length
vec3 v_circleB  xy, radius
*/

	var vertextShader = "\
uniform mat4 u_matrixMV;\
uniform mat4 u_matrixP;\
uniform ivec4 u_viewport;\
uniform vec4 u_perspective;\
attribute vec4 a_capsule0;\
attribute vec4 a_capsule1;\
varying vec3 v_circleA;\
varying vec3 v_segment;\
varying vec3 v_circleB;\
void main() {\
	vec3 posMV = (u_matrixMV * vec4(a_capsule0.xyz, 1.0)).xyz;\
	vec3 posAMV = (u_matrixMV * vec4(a_capsule0.xyz - (a_capsule1.xyz * a_capsule1.w), 1.0)).xyz;\
	vec3 posBMV = (u_matrixMV * vec4(a_capsule0.xyz + (a_capsule1.xyz * a_capsule1.w), 1.0)).xyz;\
	if (posAMV.z < posBMV.z){\
		vec3 temp = posAMV;\
		posAMV = posBMV;\
		posBMV = temp;\
	}\
\
	gl_Position = u_matrixP * vec4(posMV, 1.0);\
	posMV.y = -posMV.y;\
	posAMV.y = -posAMV.y;\
	posBMV.y = -posBMV.y;\
	float radiousOnProject = (a_capsule0.w + a_capsule1.w) / (-posAMV.z);\
	gl_PointSize = (radiousOnProject * 2.0 * float(u_viewport[3]))/ u_perspective[2];\
	vec2 posProject = posMV.xy / (-posMV.z);\
	vec2 posAProject = posAMV.xy / (-posAMV.z);\
	vec2 posBProject = posBMV.xy / (-posBMV.z);\
\
	v_circleA.xy = (((posAProject - posProject) / (radiousOnProject * 2.0)) + vec2(0.5));\
	v_circleA.z = a_capsule0.w / ((-posAMV.z) * radiousOnProject * 2.0);\
\
	v_circleB.xy = (((posBProject - posProject) / (radiousOnProject * 2.0)) + vec2(0.5));\
	v_circleB.z = a_capsule0.w / ((-posBMV.z) * radiousOnProject * 2.0);\
\
	vec2 ray = v_circleB.xy - v_circleA.xy;\
	v_segment.z = length(ray);\
	v_segment.xy = ray / v_segment.z;\
}";

	var fragmentShader = "\
precision mediump float;\
varying vec3 v_circleA;\
varying vec3 v_segment;\
varying vec3 v_circleB;\
void main() {\
	vec2 offsetCircleA = gl_PointCoord - v_circleA.xy;\
	float segmentPerp = dot(offsetCircleA, v_segment.xy);\
	if ((0.0 <= segmentPerp) && (segmentPerp <= v_segment.z)){\
		float segmentRadius = mix(v_circleA.z, v_circleB.z, segmentPerp / v_segment.z);\
		float segmentDist = abs(dot(offsetCircleA, vec2(-v_segment.y, v_segment.x)));\
		if (segmentDist < segmentRadius){\
			float temp = segmentDist / segmentRadius;\
			temp = 1.0 - (temp * temp);\
			gl_FragColor = vec4(temp, temp, temp, 1.0);\
			return;\
		};\
	}\
	float distCircleA = dot(offsetCircleA, offsetCircleA);\
	if (distCircleA <= (v_circleA.z * v_circleA.z)) {\
		float temp = 1.0 - (distCircleA / (v_circleA.z * v_circleA.z));\
		gl_FragColor = vec4(temp, temp, temp, 1.0);\
		return;\
	}\
	vec2 offsetCircleB = gl_PointCoord - v_circleB.xy;\
	float distCircleB = dot(offsetCircleB, offsetCircleB);\
	if (distCircleB <= (v_circleB.z * v_circleB.z)) {\
		float temp = 1.0 - (distCircleB / (v_circleB.z * v_circleB.z));\
		gl_FragColor = vec4(temp, temp, temp, 1.0);\
		return;\
	}\
	discard;\
	gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\
	return;\
}";

	var shader = this.m_renderer.NewShader(
		vertextShader,
		fragmentShader,
		{ 
			"a_capsule0": null,
			"a_capsule1": null
		}, 
		{ 
			"u_matrixMV" : null,
			"u_matrixP" : null,
			"u_viewport" : null,
			"u_perspective" : null
		}
	);

	var radius = 0.25;
	var material = c.Material.Factory(
		shader,
		{ 
			"u_matrixMV" : c.ShaderUniform.Factory(
				c.ShaderUniform.s_type.Float16,
				this.m_dagMatrixMV
				),
			"u_matrixP" : c.ShaderUniform.Factory(
				c.ShaderUniform.s_type.Float16,
				this.m_dagMatrixP
				),
			"u_viewport" : c.ShaderUniform.Factory(
				c.ShaderUniform.s_type.Integer4,
				this.m_renderer.GetViewport()
				),
			"u_perspective" : c.ShaderUniform.Factory(
				c.ShaderUniform.s_type.Float4,
				this.m_sceneCamera.GetNearFarFocalLengthAspect()
				)
		},
		undefined, //_textureArray,
		undefined, //_triangleCullEnable,
		undefined, //_triangleCull,
		undefined, //_triangleClockwise,
		undefined, //_blend,
		undefined, //_blendSourceFlag,
		undefined, //_blendDestinationFlag,
		true, //_depthWrite
		c.WebGL.LESS //_depthFlag
	);

	var model = this.m_renderer.NewModel(
		c.WebGL.POINTS,
		10,
		{
			"a_capsule0" : c.ModelDataStream.Factory(
				c.WebGL.FLOAT,
				4,
				new Float32Array([
					50.0, 0.0, 50.0, 10.0,
					-50.0, 0.0, 50.0, 10.0,
					-50.0, 0.0, -50.0, 10.0,
					50.0, 0.0, -50.0, 10.0,
					100.0, 0.0, 0.0, 5.0, 
					-100.0, 0.0, 0.0, 5.0, 
					0.0, 0.0, 100.0, 5.0, 
					0.0, 0.0, -100.0, 5.0, 
					0.0, 0.0, 0.0, 5.0,
					0.0, 0.0, 0.0, 5.0,
				]),
				c.WebGL.STATIC_DRAW,
				false
				),
			"a_capsule1" : c.ModelDataStream.Factory(
				c.WebGL.FLOAT,
				4,
				new Float32Array([
					0.0, 1.0, 0.0, 50.0,
					0.0, 1.0, 0.0, 50.0,
					0.0, 1.0, 0.0, 50.0,
					0.0, 1.0, 0.0, 50.0,
					0.0, 1.0, 0.0, 25.0,
					0.0, 1.0, 0.0, 25.0,
					0.0, 1.0, 0.0, 25.0,
					0.0, 1.0, 0.0, 25.0,
					0.0, 0.0, 1.0, 10.0,
					1.0, 0.0, 0.0, 10.0,
				]),
				c.WebGL.STATIC_DRAW,
				false
				),
		}
	);

	this.m_arrayRender.push(c.RenderData.Factory(model, material));
	return;
}

Main.prototype.Stop = function(){
	this.m_keepGoing = false;
}

Main.prototype.OnRun = function(in_timeDelta){
	//draw
	for (var index = 0, count = this.m_arrayRender.length; index < count; ++index){
		var render = this.m_arrayRender[index];
		render.Render(this.m_renderer);
	}

	//console.log(c.Matrix4.AsString(this.m_dagMatrixMV.GetValue()));
	//console.log(this.m_sceneCamera.GetNearFarFocalLengthAspect().GetValue());

	return this.m_keepGoing;
}

var gMain = undefined;

c.OnPageLoad = function() {
	console.info("OnPageLoad");
	var task = function(in_timeDelta){
		if (undefined === gMain){
			gMain = Main.Factory();
		}
		return gMain.OnRun(in_timeDelta);
	};
	c.Framework.Factory(task);
}

c.OnShutdown = function() {
	console.info("OnShutdown");
}

window.addEventListener('load', c.OnPageLoad, true);

			// -->
		</script>
	</body>
</html>
